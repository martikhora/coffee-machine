type: edu
custom_name: stage5
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    public class CoffeeMachine {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/Latte.java
  visible: true
  text: |
    package machine;

    public class Latte extends SimpleCoffeeReceipt{

        private int water = 350;
        private int milk = 75;
        private int beans = 20;

        private int cost = 7;

        public Latte() {
        }

        @Override
        public int getWater() {
            return water;
        }

        @Override
        public int getMilk() {
            return milk;
        }

        @Override
        public int getCoffeeBeans() {
            return beans;
        }

        public int getCost() {
            return cost;
        }
    }
  learner_created: true
- name: src/machine/Espresso.java
  visible: true
  text: |
    package machine;

    public class Espresso extends SimpleCoffeeReceipt{

        private int water = 250;
        private int coffeeBeans = 16;

        private int cost = 4;

        public Espresso() {
        }

        @Override
        public int getWater() {
            return water;
        }

        @Override
        public int getCoffeeBeans() {
            return coffeeBeans;
        }

        public int getCost() {
            return cost;
        }
    }
  learner_created: true
- name: src/machine/CoffeeMachineStepMessages.java
  visible: true
  text: |
    package machine;

    public enum CoffeeMachineStepMessages {

        STARTING("Starting to make a coffee"),
        GRINDING("Grinding coffee beans"),
        BOILING("Boiling water"),
        MIXING("Mixing boiled water with crushed coffee beans"),
        COFFEE("Pouring coffee into the cup"),
        MILK("Pouring some milk into the cup"),
        READY("Coffee is ready!");



        String message;

        CoffeeMachineStepMessages(String message) {
            this.message = message;
        }
    }
  learner_created: true
- name: src/machine/Cappuccino.java
  visible: true
  text: |
    package machine;

    public class Cappuccino extends SimpleCoffeeReceipt {

        private int water = 200;
        private int milk = 100;
        private int coffeeBeans = 12;

        private int cost = 6;

        public Cappuccino() {
        }

        @Override
        public int getWater() {
            return water;
        }

        @Override
        public int getMilk() {
            return milk;
        }

        @Override
        public int getCoffeeBeans() {
            return coffeeBeans;
        }

        public int getCost() {
            return cost;
        }
    }
  learner_created: true
- name: src/machine/CoffeeMachineInside.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class CoffeeMachineInside {
        private int water;
        private int milk;
        private int coffeeBeans;
        private int cups;
        private int money;

        public int getWater() {
            return water;
        }

        public void setWater(int water) {
            this.water = water;
        }

        public int getMilk() {
            return milk;
        }

        public void setMilk(int milk) {
            this.milk = milk;
        }

        public int getCoffeeBeans() {
            return coffeeBeans;
        }

        public void setCoffeeBeans(int coffeeBeans) {
            this.coffeeBeans = coffeeBeans;
        }

        public int getCups() {
            return cups;
        }

        public void setCups(int cups) {
            this.cups = cups;
        }

        public int getMoney() {
            return money;
        }

        public void setMoney(int money) {
            this.money = money;
        }

        public void go () {
            defaultSetOfResources(400, 540, 120, 9, 550);
            checkResources();
            selectAction();
        }


        public void defaultSetOfResources(int water, int milk, int coffeeBeans, int cups, int money) {

            setWater(water);
            setMilk(milk);
            setCoffeeBeans(coffeeBeans);
            setCups(cups);
            setMoney(money);

        }

        public void checkResources() {

            System.out.println("The coffee machine has:" + '\n' +
                    getWater() + " of water" + '\n' +
                    getMilk() + " of milk" + '\n'+
                    getCoffeeBeans() + " of coffee beans" + '\n' +
                    getCups() + " of disposable cups" + '\n' +
                    getMoney() + " of money" + '\n');

        }

        public void selectAction() {
            Scanner scanner = new Scanner(System.in);
            System.out.println("Write action (buy, fill, take): ");
            String action = scanner.next();

            switch (action) {
                case "buy":
                    buy();
                    break;
                case "fill":
                    fill();
                    break;
                case "take":
                    take();
                    break;
            }
        }

        public void buy() {
            Scanner scanner = new Scanner(System.in);
            System.out.print("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:" + '\n');
            int choice = Integer.parseInt(scanner.nextLine());

            switch (choice) {
                case 1:
                    Espresso espresso = new Espresso();
                    setWater(getWater() - espresso.getWater());
                    setCoffeeBeans(getCoffeeBeans() - espresso.getCoffeeBeans());
                    setMoney(getMoney() + espresso.getCost());
                    setCups(getCups() - 1);
                    checkResources();
                    break;
                case 2:
                    Latte latte = new Latte();
                    setWater(getWater() - latte.getWater());
                    setMilk(getMilk() - latte.getMilk());
                    setCoffeeBeans(getCoffeeBeans() - latte.getCoffeeBeans());
                    setMoney(getMoney() + latte.getCost());
                    setCups(getCups() - 1);
                    checkResources();
                    break;
                case 3:
                    Cappuccino cappuccino = new Cappuccino();
                    setWater(getWater() - cappuccino.getWater());
                    setMilk(getMilk() - cappuccino.getMilk());
                    setCoffeeBeans(getCoffeeBeans() - cappuccino.getCoffeeBeans());
                    setMoney(getMoney() + cappuccino.getCost());
                    setCups(getCups() - 1);
                    checkResources();
                    break;
            }
        }

        public void fill() {
            Scanner scanner = new Scanner(System.in);

            System.out.print("Write how many ml of water do you want to add: " + '\n');
            int water = Integer.parseInt(scanner.nextLine());
            setWater(getWater() + water);

            System.out.print("Write how many ml of milk do you want to add: " + '\n');
            int milk = Integer.parseInt(scanner.nextLine());
            setMilk(getMilk() + milk);

            System.out.print("Write how many grams of coffee beans do you want to add: " + '\n');
            int coffeeBeans = Integer.parseInt(scanner.nextLine());
            setCoffeeBeans(getCoffeeBeans() + coffeeBeans);

            System.out.print("Write how many disposable cups do you want to add: " + '\n');
            int cups = Integer.parseInt(scanner.nextLine());
            setCups(getCups() + cups);

            checkResources();


        }

        public void take() {

            int money = getMoney();
            System.out.println("I gave you $" + getMoney() + '\n');
            setMoney(getMoney() - money);
            checkResources();

        }

        @Deprecated
        public void printSteps() {
            for (CoffeeMachineStepMessages steps : CoffeeMachineStepMessages.values()) {
                System.out.println(steps.message);
            }
        }

        @Deprecated
        public void count() {
            Scanner scanner = new Scanner(System.in);
            System.out.print("Write how many cups of coffee you will need:" + '\n' + "> ");
            String cups = scanner.nextLine();

            SimpleCoffeeReceipt simpleCoffee = new SimpleCoffeeReceipt();
            simpleCoffee.cupsOfCoffeeCount(Integer.parseInt(cups));

        }

        @Deprecated
        public static void checkingAmount() {

            Scanner scanner = new Scanner(System.in);

            System.out.print("Write how many ml of water the coffee machine has: " + '\n');
            int water = Integer.parseInt(scanner.nextLine());

            System.out.print("Write how many ml of milk the coffee machine has: " + '\n');
            int milk = Integer.parseInt(scanner.nextLine());

            System.out.print("Write how many grams of coffee beans the coffee machine has: " + '\n');
            int coffee = Integer.parseInt(scanner.nextLine());

            System.out.print("Write how many cups of coffee you will need: " + '\n');
            int cups = Integer.parseInt(scanner.nextLine());

            SimpleCoffeeReceipt receipt = new SimpleCoffeeReceipt();

            if (water >= 0 & milk >= 0 & coffee >= 0) {

                int isEnoughWater = water / receipt.getWater();
                int isEnoughMilk = milk / receipt.getMilk();
                int isEnoughCoffee = coffee / receipt.getCoffeeBeans();

                int minCupsAmount = Math.min(isEnoughWater, isEnoughMilk);
                int minCupsAmount1 = Math.min(isEnoughCoffee, minCupsAmount);

                if (minCupsAmount1 >= cups)
                    System.out.print("Yes, I can make that amount of coffee");
                {
                    if (minCupsAmount1 > cups)
                        System.out.print(" (and even " + (minCupsAmount1 - cups) + " more than that)");
                }
                if (minCupsAmount1 < cups) {
                    System.out.print("No, I can make only " + minCupsAmount1 + " cup(s) of coffee");
                }
            }
        }
    }
  learner_created: true
- name: src/machine/Coffee.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class SimpleCoffeeReceipt {

        private int water = 200;
        private int milk = 50;
        private int coffeeBeans = 15;

        public SimpleCoffeeReceipt() {
        }

        public int getWater() {
            return water;
        }

        public int getMilk() {
            return milk;
        }

        public int getCoffeeBeans() {
            return coffeeBeans;
        }

        @Deprecated
        public void cupsOfCoffeeCount(int persons) {

            int waterAmount = getWater() * persons;
            int milkAmount = getMilk() * persons;
            int coffeeBeansAmount = getCoffeeBeans() * persons;

            System.out.println("For " + persons + " cups of coffee you will need:" + '\n' +
                    +waterAmount + " ml of water" + '\n' +
                    +milkAmount + " ml of milk" + '\n' +
                    +coffeeBeansAmount + " g of coffee beans");

        }


    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/179/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 05 Dec 2020 12:16:35 UTC
record: 5
